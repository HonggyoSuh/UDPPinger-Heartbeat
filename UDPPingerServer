from socket import *
import time
import random

recieve_host = '127.0.0.1'
recieve_port = 12000

remote_host = '127.0.0.1'
remote_port = 1024

serverSocket = socket(AF_INET, SOCK_DGRAM)
serverSocket.bind((recieve_host, recieve_port))

simulate_packet_loss = True
sleep_for_rand_response_times = True
message = ''
sequence_number = 0
recieved_time = 0


def wait_for_response():
    print('Wait for response')


def get_time():
    return int(round(time.time() * 1000))


def send_message(message, wait=False):
    serverSocket.sendto(message, (remote_host, remote_port))
    if not wait:
        return
    else:
        return wait_for_response()


while True:
    message, address = serverSocket.recvfrom(remote_port)
    print(get_time() - recieved_time)
    if recieved_time != 0 and get_time() - recieved_time > 5000:
        print('Client disconnect (timeout)')
        sequence_number = 0
        recieved_time = 0
    message = message.upper()
    recieved_size = len(message)
    recieved_array = message.split(bytes(' ', encoding='utf-8'))
    recieved_type = recieved_array[0].upper()
    recieved_seq = int(recieved_array[1])
    recieved_time = int(recieved_array[2])
    if recieved_seq != sequence_number+1:
        if sequence_number != 0:
            for i in range(sequence_number, recieved_seq):
                print('Dropped Packet:' + str(i))
        if sequence_number == 0:
            print('Client connect.')
        sequence_number = recieved_seq
    print('Recieve: ' + str(message))

    if sleep_for_rand_response_times:
        min_sleep = 0.2
        max_sleep = 1.0
        time.sleep(random.uniform(min_sleep, max_sleep))
        if simulate_packet_loss:
            if random.randint(0, 10) < 2:
                print('Dropped, lol')
                continue
    elif simulate_packet_loss:
        if random.randint(0, 10) < 4:
            print('Dropped, lol')
            continue
    serverSocket.sendto(message, address)
    print('Send: ' + str(message))
